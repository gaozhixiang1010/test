<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	   xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xsi:schemaLocation="http://www.springframework.org/schema/beans    
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context-3.2.xsd    
            http://www.springframework.org/schema/mvc    
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">  

<!-- 自动扫描,完成bean创建和依赖注入 -->
	<context:component-scan base-package="com.dyyt.controller" />
<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<mvc:annotation-driven />
<!-- 公共映射配置 -->
	<mvc:view-controller path="/" view-name="index" />

	<!-- 视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
			<property name="prefix" value="/"></property> 
			<property name="suffix" value=".jsp"></property>
	</bean>

	<!--
		多个拦截器,顺序执行 <list> <ref bean="commonInterceptor"/> </list> </property>
		</bean> 如果不定义mappingURL，则默认拦截所有对Controller的请求 ;
		可以使用正则表达式对url进行匹配，从而更细粒度的进行拦截(.*/entryOrJsonController\.do\?action=reg.*);

		<bean id="commonInterceptor"
		class="com.wy.interceptor.CommonInterceptor"> <property
		name="mappingURL" value=".*/entryOrJsonController\.do\?action=reg.*"/>
		</bean>
	-->
<!-- 拦截器 -->
	<mvc:interceptors>
		<bean class="com.dyyt.filter.CommonInterceptor"></bean>
	</mvc:interceptors>
<!-- 处理JSON数据转换的 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="209715200" />
	</bean>

	<!--
		SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException
	-->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!--
					遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面
				-->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">index.jsp</prop>
			</props>
		</property>
	</bean>

<!-- 异常解析器 -->
	<bean id="simpleMappingExceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">common/fileerror</prop>
			</props>
		</property>
	</bean>
</beans>